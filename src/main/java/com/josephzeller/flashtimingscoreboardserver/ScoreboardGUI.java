package com.josephzeller.flashtimingscoreboardserver;

import com.josephzeller.flashtimingscoreboardserver.object.ApplicationState;
import com.josephzeller.flashtimingscoreboardserver.object.Race;

import javax.swing.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.text.ParseException;
import java.util.Timer;
import java.util.TimerTask;

/**
 *
 * @author James
 */
public class ScoreboardGUI extends javax.swing.JFrame {

    /**
     * Creates new form ScoreboardGUI
     */
    ApplicationState appState;
    Timer timer;

    public ScoreboardGUI(ApplicationState appState) {
        super("Flash Timing Scoreboard Panel");
        this.appState = appState;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        fileListScrollPane = new javax.swing.JScrollPane();
        fileList = new javax.swing.JList<>();
        raceListScrollPane = new javax.swing.JScrollPane();
        raceList = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        clearDisplayButton = new javax.swing.JButton();
        mergeButton = new javax.swing.JButton();
        forgetButton = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        displayButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        selectFolderButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        fileList.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        fileList.setModel(new DefaultListModel<>());
        fileList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        fileList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fileListMouseClicked(evt);
            }
        });
        fileListScrollPane.setViewportView(fileList);

        raceList.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        raceList.setModel(new DefaultListModel<>());
        raceListScrollPane.setViewportView(raceList);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Files");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel2.setText("Races");

        clearDisplayButton.setText("Clear Display");
        clearDisplayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearDisplayButtonActionPerformed(evt);
            }
        });

        mergeButton.setText("Merge Races");
        mergeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mergeButtonActionPerformed(evt);
            }
        });

        forgetButton.setText("Forget Race");
        forgetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forgetButtonActionPerformed(evt);
            }
        });

        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Warning Prompt Before Displaying");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        displayButton.setText("Display Race on Scoreboard");
        displayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Double click file name to copy it to other panel.");

        jLabel4.setText("Ctrl+Click to select multiple races.");

        jLabel5.setText("Current Folder: Unselected");
        jLabel5.setMaximumSize(new java.awt.Dimension(940, 14));

        selectFolderButton.setText("Select Folder");
        selectFolderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFolderButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(153, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(fileListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3)))
                    .addComponent(selectFolderButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel4))
                            .addComponent(raceListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(mergeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(forgetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(displayButton, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(147, 147, 147))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(clearDisplayButton)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 940, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(raceListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(mergeButton)
                                .addGap(12, 12, 12)
                                .addComponent(forgetButton))
                            .addComponent(displayButton, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(fileListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 395, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectFolderButton)))
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox1)
                    .addComponent(clearDisplayButton))
                .addGap(21, 21, 21))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void forgetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forgetButtonActionPerformed
        if (raceList.getSelectedIndex() == -1 || raceList.getSelectedIndices().length > 1)
        {
            JOptionPane.showMessageDialog(this,
                    "Select a race to forget. Only one race can be forgotten at a time.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        ((DefaultListModel) raceList.getModel()).remove(raceList.getSelectedIndex());
        // TODO add your handling code here:
    }//GEN-LAST:event_forgetButtonActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void selectFolderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectFolderButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Choose directory");
        chooser.setAcceptAllFileFilterUsed(false);
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            appState.selectedFolder = chooser.getSelectedFile();
            jLabel5.setText("Current Folder: " + appState.selectedFolder.getPath());
            refreshFileList();
        }

        //Create a repeating task that refreshes our file list.
        if (timer != null)
        {
            timer.cancel();
        }
        timer = new Timer();
        timer.scheduleAtFixedRate(new TimerTask()
        {
            @Override
            public void run()
            {
                refreshFileList();
            }
        }, 0, 5000);
    }//GEN-LAST:event_selectFolderButtonActionPerformed

    private void mergeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mergeButtonActionPerformed
        if (raceList.getSelectedIndices().length < 2)
        {
            JOptionPane.showMessageDialog(this,
                    "Select two races (using ctrl+click) to merge them!",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        Race[] races = new Race[raceList.getSelectedIndices().length];
        for (int i = 0; i < raceList.getSelectedIndices().length; i++) //TODO Is there a cleaner way?
        {
            races[i] = (Race) ((DefaultListModel) raceList.getModel()).getElementAt(raceList.getSelectedIndices()[i]);
        }

        String newRaceName = (String) JOptionPane.showInputDialog(
                this,
                "Title of new merged race:",
                "Name this Race",
                JOptionPane.PLAIN_MESSAGE,
                null,
                null,
                races[0].name);

        if (newRaceName == null || newRaceName.equals("") || newRaceName.length() == 0) //If the user presses cancel or name is empty.
        {
            return;
        }

        Race newRace = Race.mergeRaces(newRaceName, races);
        for (Race race : races) //"Forget" all the original races we're merging
        {
            ((DefaultListModel) raceList.getModel()).removeElement(race);
        }
        ((DefaultListModel) raceList.getModel()).addElement(newRace); //Add the newly merged race.
        // TODO add your handling code here:
    }//GEN-LAST:event_mergeButtonActionPerformed

    private void displayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayButtonActionPerformed
        //If more than one race is selected
        if (raceList.getSelectedIndex() == -1)
        {
            JOptionPane.showMessageDialog(this,
                    "You must select a race before clicking the display button.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (raceList.getSelectedIndices().length > 1)
        {
            JOptionPane.showMessageDialog(this,
                    "Only one race can be displayed at a time. Please deselect one+more of your options.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        Race race = (Race) ((DefaultListModel) raceList.getModel()).getElementAt(raceList.getSelectedIndex());
        if (jCheckBox1.isSelected())
        {
            int selectedOption = JOptionPane.showOptionDialog(this,
                    "Are you sure you want to display the race \"" + race.name + "\"?",
                    "Confirm",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    new String[]{"Yes", "No"},
                    null);

            if (selectedOption != 0)
            {
                return;
            }
        }
        appState.scoreboardSocket.displayRace(race);
        // TODO add your handling code here:
    }//GEN-LAST:event_displayButtonActionPerformed

    private void clearDisplayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearDisplayButtonActionPerformed
        appState.scoreboardSocket.clearDisplay();
        // TODO add your handling code here:
    }//GEN-LAST:event_clearDisplayButtonActionPerformed

    private void fileListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fileListMouseClicked
        if (evt.getClickCount() == 2)
        {
            int i = fileList.locationToIndex(evt.getPoint());

            Race race = null;
            try
            {
                race = Race.fromFile(new File(appState.selectedFolder + System.getProperty("file.separator") + fileList.getModel().getElementAt(i)));
            }
            catch (FileNotFoundException e)
            {
                JOptionPane.showMessageDialog(this,
                        "Error. Is the file still there? Did it get moved, renamed, or deleted?",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                refreshFileList();
                return;
            }
            catch (ParseException e)
            {
                JOptionPane.showMessageDialog(this,
                        "Error parsing times. Is one of them in an incorrect format? This program does not support times > 24hrs.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                refreshFileList();
                return;
            }
            if (race == null)
            {
                JOptionPane.showMessageDialog(this,
                        "Error. Is the file still there? Did it get moved, renamed, or deleted?",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                refreshFileList();
                return;
            }

            String newRaceName = (String) JOptionPane.showInputDialog(
                    this,
                    "Title of race:",
                    "Name this Race",
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    null,
                    race.name);

            if (newRaceName == null) //If the user presses cancel.
            {
                return;
            }

            if (newRaceName.length() > 0 && !newRaceName.equals(race.name))
            {
                race.name = newRaceName;
            }

            ((DefaultListModel) raceList.getModel()).addElement(race);
            //TODO Create race from file and display it in Race.
        }
    }//GEN-LAST:event_fileListMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ScoreboardGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ScoreboardGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ScoreboardGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ScoreboardGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ScoreboardGUI gui = new ScoreboardGUI(new ApplicationState());
                gui.setVisible(true);
                gui.setResizable(false);
                
                ((DefaultListModel) gui.fileList.getModel()).addElement("Hello");
            }
        });
    }

    //TODO Revamp file refreshing to add new items to the top of the list.
    public void refreshFileList()
    {
        if (appState == null || appState.selectedFolder == null)
            return;
        File directory = appState.selectedFolder;
        String[] fileNames = directory.list();
        ((DefaultListModel) fileList.getModel()).removeAllElements();
        for (String s : fileNames)
        {
            if (s.endsWith(".lif"))
            {
                ((DefaultListModel) fileList.getModel()).addElement(s);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearDisplayButton;
    private javax.swing.JButton displayButton;
    private javax.swing.JList<String> fileList;
    private javax.swing.JScrollPane fileListScrollPane;
    private javax.swing.JButton forgetButton;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton mergeButton;
    private javax.swing.JList<String> raceList;
    private javax.swing.JScrollPane raceListScrollPane;
    private javax.swing.JButton selectFolderButton;
    // End of variables declaration//GEN-END:variables
}
